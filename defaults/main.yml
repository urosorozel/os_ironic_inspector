---
# Copyright 2018, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Defaults file for openstack-ansible-ironic

# Verbosity Options
debug: False

# Set the package install state for distribution and pip packages
# Options are 'present' and 'latest'
ironic_inspector_package_state: "latest"
ironic_inspector_pip_package_state: "latest"

# These variables are used in 'developer mode' in order to allow the role
# to build an environment directly from a git source without the presence
# of an OpenStack-Ansible repo_server.
ironic_inspector_git_repo: https://git.openstack.org/openstack/ironic-inspector
ironic_inspector_git_install_branch: stable/rocky

ironic_inspector_developer_mode: false
ironic_inspector_developer_constraints:
  - "git+{{ ironic_inspector_git_repo }}@{{ ironic_inspector_git_install_branch }}#egg=ironic-inspector"

# Name of the virtual env to deploy into
ironic_inspector_venv_tag: untagged
ironic_inspector_bin: "/openstack/venvs/ironic-inspector-{{ ironic_inspector_venv_tag }}/bin"

# enable ironic inspector in ironic
ironic_inspector_ironic_enable: True
# System info
ironic_inspector_system_user_name: ironic-inspector
ironic_inspector_system_group_name: ironic-inspector
ironic_inspector_system_shell: /bin/bash
ironic_inspector_system_comment: ironic inspector system user
ironic_inspector_system_home_folder: "/var/lib/{{ ironic_inspector_system_user_name }}"
ironic_inspector_system_log_folder: "/var/log/{{ ironic_inspector_system_user_name }}"
ironic_inspector_lock_path: /var/lock/ironic-inspector

# Ironic Inspector Program and Service names
python_ironic_client_program_name: ironic
ironic_inspector_services:
  ironic-inspector:
    group: ironic_inspector
    service_name: ironic-inspector
    init_config_overrides: "{{ ironic_inspector_init_config_overrides }}"
    program_override: "{{ ironic_inspector_bin }}/ironic-inspector --config-file /etc/ironic-inspector/ironic-inspector.conf"

ironic_inspector_service_name: ironic-inspector
ironic_inspector_service_type: baremetal-introspection
ironic_inspector_service_proto: http
ironic_inspector_service_publicuri_proto: "{{ openstack_service_publicuri_proto | default(ironic_inspector_service_proto) }}"
ironic_inspector_service_adminuri_proto: "{{ openstack_service_adminuri_proto | default(ironic_inspector_service_proto) }}"
ironic_inspector_service_internaluri_proto: "{{ openstack_service_internaluri_proto | default(ironic_inspector_service_proto) }}"
ironic_inspector_service_port: 5050
ironic_inspector_service_description: "Ironic Baremetal Introspection Service"
ironic_inspector_service_publicuri: "{{ ironic_inspector_service_publicuri_proto }}://{{ external_lb_vip_address }}:{{ ironic_inspector_service_port }}"
ironic_inspector_service_publicurl: "{{ ironic_inspector_service_publicuri }}"
ironic_inspector_service_adminuri: "{{ ironic_inspector_service_adminuri_proto }}://{{ internal_lb_vip_address }}:{{ ironic_inspector_service_port }}"
ironic_inspector_service_adminurl: "{{ ironic_inspector_service_adminuri }}"
ironic_inspector_service_internaluri: "{{ ironic_inspector_service_internaluri_proto }}://{{ internal_lb_vip_address }}:{{ ironic_inspector_service_port }}"
ironic_inspector_service_internalurl: "{{ ironic_inspector_service_internaluri }}"
ironic_inspector_program_name: ironic-inspector
ironic_inspector_service_region: RegionOne
ironic_inspector_service_project_name: "service"
ironic_inspector_service_project_domain_id: default
ironic_inspector_service_user_domain_id: default
ironic_inspector_service_role_name: "admin"
ironic_inspector_service_in_ldap: False

# Is this Ironic inspector installation working standalone?
# If you're wanting Ironic inspector to work without being integrated to other OpenStack
# services, set this to True, and update the dhcp configuration appropriately
ironic_inspector_standalone: False

# Database
ironic_inspector_db_setup_host: "{{ ('galera_all' in groups) | ternary(groups['galera_all'][0], 'localhost') }}"
ironic_inspector_galera_address: "{{ galera_address | default('127.0.0.1') }}"
ironic_inspector_galera_user: ironic-inspector
ironic_inspector_galera_database: ironic_inspector
## Keystone authentication middleware
ironic_inspector_keystone_auth_plugin: password

ironic_inspector_openstack_auth_strategy: keystone

# Standalone Ironic configuration
ironic_inspector_standalone_auth_strategy: noauth
ironic_inspector_standalone_api_url: "{{ ironic_inspector_service_internaluri }}/"
ironic_inspector_standalone_db_connection_string: "mysql+pymysql://{{ ironic_inspector_galera_user }}:{{ ironic_inspector_container_mysql_password }}@{{ ironic_inspector_galera_address }}/{{ ironic_inspector_galera_database }}"

# Ironic db tuning
ironic_inspector_db_max_overflow: 10
ironic_inspector_db_max_pool_size: 120
ironic_inspector_db_pool_timeout: 30


# If you want to regenerate the ironic users SSH keys, on each run, set this
# var to True. Otherwise keys will be generated on the first run and not
# regenerated each run.
ironic_inspector_recreate_keys: False

# venv_download, even when true, will use the fallback method of building the
# venv from scratch if the venv download fails.
ironic_inspector_venv_download: "{{ not ironic_inspector_developer_mode | bool }}"
ironic_inspector_venv_download_url: http://127.0.0.1/venvs/untagged/ubuntu/ironic-inspector.tgz

ironic_inspector_tftp_server_address: "{{ ansible_host }}"

ironic_inspector_requires_pip_packages:
  - virtualenv
  - virtualenv-tools
  - python-keystoneclient # Keystoneclient needed for the OSA keystone lib
  - httplib2 # for Ansible's uri module

ironic_inspector_pip_packages:
  - cryptography
  - ironic-inspector
  - PyMySQL
  - python-ironicclient
  - python-memcached
  - python-swiftclient

# Auth
ironic_inspector_service_user_name: "ironic_inspector"

ironic_inspector_boot_mode_record: True
### OpenStack Services to integrate with
# Ironic swift store information
ironic_inspector_swift_container: ironic-inspector
ironic_inspector_swift_api_version: v1
ironic_inspector_swift_url_endpoint_type: object-store
ironic_inspector_swift_username: swift-inspector
ironic_inspector_swift_password: swift-inspector-password
ironic_inspector_swift_project_name: ironic-inspector
ironic_inspector_swift_role_names:
  - _member_
  - swiftoperator
ironic_inspector_swift_store_data: swift
# The ironic inspector swift auth account and swift endpoints will be generated using the
#  known swift data as provided by swift stat. If you wish to set either of these
#  items to something else define these variables.
# ironic_inspector_swift_auth_account: AUTH_1234567890
# ironic_inspector_swift_endpoint: https://localhost:8080
# Ironic inspector
ironic_inspector_enable_discovery: True
ironic_inspector_valid_interfaces: internal
ironic_inspector_manage_firewall: True
ironic_inspector_dhcp_interface: eth15
ironic_inspector_openstack_db_connection_string: "mysql+pymysql://{{ ironic_inspector_galera_user }}:{{ ironic_inspector_container_mysql_password }}@{{ ironic_inspector_galera_address }}/{{ ironic_inspector_galera_database }}"
ironic_inspector_data_dir: /ironic
ironic_inspector_port_addition: pxe
ironic_inspector_keep_ports: present
ironic_inspector_ramdisk_logs_dir:
ironic_inspector_always_store_ramdisk_logs: True
ironic_inspector_default_node_driver: ipmi
#ironic_inspector_processing_hooks: ramdisk_error,root_disk_selection,scheduler,validate_interfaces,capabilities,pci_devices
ironic_inspector_node_not_found_hook: enroll
ironic_inspector_pxe_filter: dnsmasq #iptables
ironic_inspector_report_path: report_path
# Ironic inspector dhcp
ironic_inspector_dhcp_pool_range: 172.30.0.20 172.30.0.30
ironic_inspector_dhcp_subnet: 172.30.0.0
ironic_inspector_dhcp_subnet_mask: 255.255.252.0
ironic_inspector_dhcp_gateway: 172.30.0.1
ironic_inspector_dhcp_nameservers: 172.30.0.1
ironic_inspector_dhcp_lease_time: 600
# Ironic inspector nginx
ironic_inspector_nginx_log_dir: /var/log/nginx
ironic_inspector_nginx_port: 8080

ironic_inspector_dhcp_type: dnsmasq # isc_dhcp
ironic_inspector_boot_mode: http # tftp
ironic_inspector_pxe_boot_mode: "{{ ironic_inspector_boot_mode | default('http') }}"
ironic_inspector_ipa_httpboot_image_dir: /httpboot
ironic_inspector_ipa_tftpboot_image_dir: /tftpboot
ironic_inspector_ipa_kernel_url: https://tarballs.openstack.org/ironic-python-agent/tinyipa/files/tinyipa-stable-rocky.vmlinuz
ironic_inspector_ipa_kernel_name: ipa_kernel
ironic_inspector_ipa_kernel_sha256_url: https://tarballs.openstack.org/ironic-python-agent/tinyipa/files/tinyipa-stable-rocky.vmlinuz.sha256
ironic_inspector_ipa_initrd_url: https://tarballs.openstack.org/ironic-python-agent/tinyipa/files/tinyipa-stable-rocky.gz
ironic_inspector_ipa_initrd_name: ipa_ramdisk
ironic_inspector_ipa_initrd_sha256_url: https://tarballs.openstack.org/ironic-python-agent/tinyipa/files/tinyipa-stable-rocky.gz.sha256

ironic_inspector_ipa_kernel_suffix_url: "{{ ironic_inspector_nginx_port}}{{ ironic_inspector_ipa_httpboot_image_dir }}/{{ ironic_inspector_ipa_kernel_name }}"
ironic_inspector_ipa_initrd_suffix_url: "{{ ironic_inspector_nginx_port}}{{ ironic_inspector_ipa_httpboot_image_dir }}/{{ ironic_inspector_ipa_initrd_name}}"
# This variable is used by the repo_build process to determine
# which host group to check for members of before building the
# pip packages required by this role. The value is picked up
# by the py_pkgs lookup.
ironic_role_project_group: ironic_inspector_all

### Config Overrides
ironic_inspector_conf_overrides: {}
ironic_inspector_rootwrap_conf_overrides: {}
ironic_inspector_policy_overrides: {}

# pxe boot
ironic_inspector_pxe_append_params: "ipa-debug=1 systemd.journald.forward_to_console=yes" #ipa-inspection-collectors=default,logs,extra_hardware

ironic_inspector_init_config_overrides: {}
